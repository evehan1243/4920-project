//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Scanner;

import javax.swing.*;
import javax.swing.event.*;


public class SandBoxGUI extends JPanel {
	
	private JPanel pl;
    private JLabel jcomp1;
    private JLabel jcomp2;
    private JTextArea jcomp3;
    private JButton jcomp4;
    private JList jcomp5;
    private JTextArea jcomp6;
    private JTextArea jcomp7;
    private JTextArea jcomp8;
    private JButton jcomp9;
    private JButton jcomp10;
    private JButton jcomp11;
    

    private InGameHandle gHandle;
    private DefaultListModel listModel;
    private JScrollPane statePane;

    public SandBoxGUI(JPanel p) {
    	pl = p;

        listModel = new DefaultListModel();

        
        //construct components
        jcomp1 = new JLabel ("Turns Left");
        jcomp2 = new JLabel ("Turn Timer");
        jcomp3 = new JTextArea (5, 5);
        jcomp4 = new JButton ("End Turn");
        jcomp5 = new JList (listModel);
        jcomp6 = new JTextArea (5, 5);
        jcomp7 = new JTextArea (5, 5);
        jcomp8 = new JTextArea (5, 5);
        
        jcomp9 = new JButton ("Generator Army");
        jcomp10 = new JButton ("Assign");
        jcomp11 = new JButton ("Attack");

        gHandle = new InGameHandle();
    	jcomp5.addMouseListener(new jListClick());
        jcomp4.addActionListener(new changeTurnAction());
    	jcomp5.addListSelectionListener(new jListSelect());
        jcomp9.addActionListener(new genOffenceAction());
        jcomp10.addActionListener(new assignAction());
        jcomp11.addActionListener(new attackAction());

        //adjust size and set layout
        setPreferredSize (new Dimension (1280, 960));
        setLayout (null);

        //add components
        add (jcomp1);
        add (jcomp2);
        add (jcomp3);
        add (jcomp4);
        add (jcomp5);
        add (jcomp6);
        add (jcomp7);
        add (jcomp8);
        add (jcomp9);
        add (jcomp10);
        add (jcomp11);

        //set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds (25, 40, 100, 25);
        jcomp2.setBounds (605, 40, 100, 25);
        jcomp3.setBounds (25, 250, 175, 250);
        jcomp4.setBounds (595, 435, 105, 60);
        jcomp5.setBounds (220, 425, 350, 70);
        jcomp6.setBounds (160, 15, 405, 70);
        jcomp7.setBounds (25, 100, 100, 140);
        jcomp8.setBounds (605, 90, 100, 140);
        jcomp9.setBounds (595, 240, 155, 60);
        jcomp10.setBounds (595, 300, 105, 60);
        jcomp11.setBounds (595, 370, 105, 60);
        
       
        
        JScrollPane listPane = new JScrollPane();
        listPane.add(jcomp5);
        listPane.setBounds(220, 425, 350, 70);
        listPane.setViewportView(jcomp5);
        add(listPane);

    }
    
    
    public void showJList() {
    	
    	if(listModel.getSize() == 0) {
	    	if(gHandle.getTurn().equals("defence_turn")) {
	    		
	    		ArrayList<Unit> defence = gHandle.getDefence();   		
	    		for(int i=0; i<5; i++) {
	    			listModel.addElement(defence.get(i).getUnitName());
	    		}
	    	} else if(gHandle.getTurn().equals("offence_turn")) {
	    		
	    		ArrayList<Unit> attacker = gHandle.getAttacker();    		
	    		for(int i=0; i<5; i++) {
	    			listModel.addElement(attacker.get(i).getUnitName());
	    		}
	    	}
    	} else {
    		

	    	if(gHandle.getTurn().equals("defence_turn")) {
	    		
	    		int i;
	    		ArrayList<Unit> defence = gHandle.getDefence();   		
	    		for(i=0; i < defence.size(); i++) {

	    			listModel.setElementAt(defence.get(i).getUnitName(), i);
	    		}

	    		if(i < listModel.getSize()) {
		    		for(; i < listModel.getSize(); i++) {
		    			listModel.setElementAt("null", i);
		    		}
	    		}
	    	} else if(gHandle.getTurn().equals("offence_turn")) {
	    		
	    		int i;
	    		ArrayList<Unit> attacker = gHandle.getAttacker();    		
	    		for(i=0; i < attacker.size(); i++) {

	    			listModel.setElementAt(attacker.get(i).getUnitName(), i);
	    		}
	    		
	    		if(i < listModel.getSize()) {
		    		for(; i < listModel.getSize(); i++) {
		    			listModel.setElementAt("null", i);
		    		}
	    		}
	    	}    		
    	}
    }

	
	private class changeTurnAction implements ActionListener{
		public void actionPerformed(ActionEvent a){

			gHandle.changeTurn(jcomp7);
			showJList();
		
	    	if(statePane != null) {
		        Container parent = statePane.getParent();
		        parent.remove(statePane);
		        parent.revalidate();
		        parent.repaint();
	    	}
		}
	}
	
	private class assignAction implements ActionListener{
		public void actionPerformed(ActionEvent a){
	    	if(gHandle.getTurn().equals("defence_turn")) {
	    		gHandle.defenceTurnAssign(jcomp3);

	    	} else if(gHandle.getTurn().equals("offence_turn")) {
	    		
	    		gHandle.offenceTurnAssign(jcomp3);
	    	}
	    	showJList();
	    	
	    	if(statePane != null) {
		        Container parent = statePane.getParent();
		        parent.remove(statePane);
		        parent.revalidate();
		        parent.repaint();
	    	}
		}
	}
	
	private class attackAction implements ActionListener{
		public void actionPerformed(ActionEvent a){
	    	if(gHandle.getTurn().equals("defence_turn")) {
	    		gHandle.defenceTurnAttack(jcomp3);

	    	} else if(gHandle.getTurn().equals("offence_turn")) {
	    		
	    		gHandle.offenceTurnAttack(jcomp3);
	    	}
	    	showJList();
	    	
	    	if(statePane != null) {
		        Container parent = statePane.getParent();
		        parent.remove(statePane);
		        parent.revalidate();
		        parent.repaint();
	    	}
		}
	}
	
	private class genOffenceAction implements ActionListener{
		public void actionPerformed(ActionEvent a){

			gHandle.random_input(jcomp3);
			showJList();
		}
	}
	
	private class jListSelect implements ListSelectionListener{
        public void valueChanged(ListSelectionEvent arg0) {
            if (!arg0.getValueIsAdjusting()) {
              String army_name = jcomp5.getSelectedValue().toString();
              
              gHandle.setClickedArmy(army_name);
            }
        }
	}
	
	private class jListClick implements MouseListener{
	    public void mouseClicked(MouseEvent e){
	        if(e.getClickCount()==2){

	            JTextArea jta = new JTextArea();
	            jta.setBounds(250, 250, 300, 100);
	            jta.setText(gHandle.showArmyState(gHandle.getClickedArmy()));

	            statePane = new JScrollPane();
	            statePane.add(jta);
	            statePane.setBounds(250, 250, 300, 100);
	            statePane.setViewportView(jta);
	            add(statePane); 
	        }
	    }

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}		
	}
	
//    public static void main (String[] args) {
//        JFrame frame = new JFrame ("SandBoxGUI");
//        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
//        frame.getContentPane().add (new SandBoxGUI());
//        frame.pack();
//        frame.setVisible (true);
//    }
}
